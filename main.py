import streamlit as st
from openai import AzureOpenAI
import os
from datetime import datetime


# Initialize Azure OpenAI client
client = AzureOpenAI(
    azure_endpoint=st.secrets["AZURE_OPENAI_ENDPOINT_se_gpt41"],
    api_key=st.secrets["AZURE_OPENAI_API_KEY_se_gpt41"],
    api_version="2024-12-01-preview"
)

# Page configuration
st.set_page_config(
    page_title="algorithm.ai",
    page_icon="media/large_logo.png",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.logo("media/large_logo.png", icon_image="media/large_logo.png", size="large")

# with st.sidebar:
#     st.header("Info")

# Initialize session state for chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Initialize session state for collected contacts
if "collected_contacts" not in st.session_state:
    st.session_state.collected_contacts = []

# Initialize session state for showing contact form
if "show_contact_form" not in st.session_state:
    st.session_state.show_contact_form = False

# Initialize session state for selected question
if "selected_question" not in st.session_state:
    st.session_state.selected_question = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞..."

# Initialize message counter
if "user_message_count" not in st.session_state:
    st.session_state.user_message_count = 0

# Title
st.title("ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —Å–∞–π—Ç–∞ AlgoritmAI")

# Documentation sections
with st.expander("üìã –û –ø—Ä–æ–µ–∫—Ç–µ", expanded=False):
    st.markdown("""
    ### –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å–∞–π—Ç–∞ AlgoritmAI —Å —Ü–µ–ª—å—é:
    - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    - –°–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
    
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    - –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–± —É—Å–ª—É–≥–∞—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ
    - –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥–µ –∫–∞–∫ –ò–ò
    - –°—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ –æ–±—â–µ–Ω–∏—è
    """)

with st.expander("üéØ –ó–∞–¥–∞—á–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞", expanded=False):
    st.markdown("""
    ### –†–æ–ª—å –∏ –∑–∞–¥–∞—á–∏
    1. **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
       - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö
       - –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∫–µ–π—Å–∞—Ö
       - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏
    
    2. **–°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**
       - –í–µ–∂–ª–∏–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
       - –ü–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—É –ø—Ä–æ–¥–∞–∂
    
    3. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤**
       - –ß–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏
       - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ "–Ω–µ –ø–æ —Ç–µ–º–µ"
       - –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è
    """)

with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", expanded=False):
    st.markdown("""
    ### –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    
    –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:
    
    1. –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û?
    2. –ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω?
    3. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
    4. –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?
    5. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞?
    6. –ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º?
    7. –ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö?
    8. –ö–∞–∫–∏–µ —É –≤–∞—Å —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã?
    9. –ö–∞–∫ –¥–æ–ª–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?
    10. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞?
    """)

with st.expander("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞", expanded=False):
    st.markdown("""    
    ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ù–∞ –º–æ–º–µ–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç –Ω–∞ —Å–∞–π—Ç–µ algoritmai.com –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.
    """)

with st.expander("üöÄ –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è", expanded=False):
    st.markdown("""
    ### –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    1. **–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π**
       - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –∫–µ–π—Å–æ–≤
       - –í–∫–ª—é—á–µ–Ω–∏–µ FAQ –ø–æ —á–∞—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
       - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    
    2. **–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è**
       - –í–Ω–µ–¥—Ä–µ–Ω–∏–µ RAG (Retrieval-Augmented Generation)
       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
       - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    3. **–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤**
       - –í–Ω–µ–¥—Ä–µ–Ω–∏–µ Prompt Chaining –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
       - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á
       - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    """)

# Function to load and process knowledge base
def load_knowledge_base():
    knowledge = {}
    try:
        # Load system prompt
        with open("system_prompt.txt", "r", encoding="utf-8") as f:
            knowledge["system_prompt"] = f.read().strip()
        
        # Load all knowledge files from the knowledge directory
        knowledge_dir = "knowledge"
        for filename in os.listdir(knowledge_dir):
            if filename.endswith(".txt"):
                file_path = os.path.join(knowledge_dir, filename)
                with open(file_path, "r", encoding="utf-8") as f:
                    knowledge[filename.replace(".txt", "")] = f.read().strip()
        
        # Add collected contacts to knowledge base if any exist
        if st.session_state.collected_contacts:
            contacts_info = "=== –°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ===\n"
            for i, contact in enumerate(st.session_state.collected_contacts, 1):
                contacts_info += f"–ö–æ–Ω—Ç–∞–∫—Ç #{i}:\n"
                contacts_info += f"–ò–º—è: {contact['name']}\n"
                contacts_info += f"Email: {contact['email']}\n"
                contacts_info += f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact['phone']}\n"
                contacts_info += f"–ö–æ–º–ø–∞–Ω–∏—è: {contact['company']}\n"
                contacts_info += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {contact['message']}\n"
                contacts_info += f"–í—Ä–µ–º—è: {contact['timestamp']}\n\n"
            knowledge["collected_contacts"] = contacts_info
        
        # Format the system prompt with knowledge
        full_system_prompt = knowledge["system_prompt"].format(
            knowledge_base="\n\n".join([f"=== {k} ===\n{v}" for k, v in knowledge.items() if k != "system_prompt"])
        )
        
        return full_system_prompt
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")
        return None

st.subheader("–ß–∞—Ç-–±–æ—Ç")

@st.fragment
def render_chatbot():
    chat_container = st.container(border=True, height=300)

    chat_container.markdown("...")

    # Display chat messages
    with chat_container:
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    # Contact form
    if st.session_state.show_contact_form:
        with st.form("contact_form"):
            st.subheader("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
            name = st.text_input("–í–∞—à–µ –∏–º—è")
            email = st.text_input("Email")
            phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
            company = st.text_input("–ö–æ–º–ø–∞–Ω–∏—è")
            message = st.text_area("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                contact_info = {
                    "name": name,
                    "email": email,
                    "phone": phone,
                    "company": company,
                    "message": message,
                    "timestamp": str(datetime.now())
                }
                st.session_state.collected_contacts.append(contact_info)
                st.session_state.show_contact_form = False
                
                # Add a system message about the collected contact
                st.session_state.messages.append({
                    "role": "system",
                    "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({email}) –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ {company} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã. –¢–µ–ª–µ—Ñ–æ–Ω: {phone}. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
                })
                
                # Add assistant's response
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                })
                st.rerun()

    # Chat input
    col1, col2, col3 = st.columns([1, 1, 1])  # 3:1:1 ratio for input:selectbox:button
    
    with col1:
        prompt = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        # If a question is selected and no prompt is entered, use the selected question
        if prompt is None and st.session_state.selected_question != "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞...":
            prompt = st.session_state.selected_question
            st.session_state.selected_question = None  # Reset to None after use
            st.session_state.example_questions = None  # Reset the selectbox value
    
    # Add example questions selectbox
    example_questions = [
        "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û?",
        "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö",
        "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?",
        "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞?",
        "–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º?",
        "–ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö?",
        "–ö–∞–∫–∏–µ —É –≤–∞—Å —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã?",
        "–ö–∞–∫ –¥–æ–ª–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?",
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞?"
    ]
    
    with col2:
        selected_question = st.selectbox(
            "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤",
            example_questions,
            key="example_questions",
            index=None,
            on_change=lambda: setattr(st.session_state, "selected_question", st.session_state.example_questions),
            label_visibility="collapsed"
        )
    
    with col3:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", use_container_width=True):
            st.session_state.messages = []
            st.session_state.selected_question = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞..."
            st.rerun()

    if prompt:
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        # Increment user message counter
        st.session_state.user_message_count += 1
        
        # Display user message
        with chat_container:
            with st.chat_message("user"):
                st.markdown(prompt)
        
        try:
            # Get response from OpenAI
            with chat_container:
                with st.chat_message("assistant"):
                    with st.spinner("–î—É–º–∞—é..."):
                        # Load and process knowledge base
                        full_system_prompt = load_knowledge_base()
                        
                        if full_system_prompt:
                            response = client.chat.completions.create(
                                model="gpt-4.1",  # Azure OpenAI model name
                                messages=[
                                    {"role": "system", "content": full_system_prompt}
                                ] + [
                                    {"role": m["role"], "content": m["content"]} 
                                    for m in st.session_state.messages
                                ],
                                temperature=0.3,  # Lower temperature for more focused responses
                                top_p=0.95,      # High top_p for natural but controlled responses
                                frequency_penalty=0.2,  # Mild penalty to avoid repetition
                                presence_penalty=0.2    # Mild penalty to maintain context
                            )
                            
                            # Add assistant response to chat history
                            assistant_response = response.choices[0].message.content
                            st.session_state.messages.append({"role": "assistant", "content": assistant_response})
                            st.markdown(assistant_response)
                            
                            # Check if the response suggests collecting contacts
                            contact_triggers = [
                                "–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                                "–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                                "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                                "—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏",
                                "–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è",
                                "–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"
                            ]
                            
                            # Only show contact form if user has sent at least 3 messages
                            if st.session_state.user_message_count >= 3 and any(trigger in assistant_response.lower() for trigger in contact_triggers):
                                st.session_state.show_contact_form = True
                                st.rerun()
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Azure OpenAI –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit")

render_chatbot()

# Display collected contacts
with st.expander("üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", expanded=False):
    if st.session_state.collected_contacts:
        for i, contact in enumerate(st.session_state.collected_contacts, 1):
            st.markdown(f"### –ö–æ–Ω—Ç–∞–∫—Ç #{i}")
            st.markdown(f"**–í—Ä–µ–º—è:** {contact['timestamp']}")
            st.markdown(f"**–ò–º—è:** {contact['name']}")
            st.markdown(f"**Email:** {contact['email']}")
            st.markdown(f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {contact['phone']}")
            st.markdown(f"**–ö–æ–º–ø–∞–Ω–∏—è:** {contact['company']}")
            st.markdown(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {contact['message']}")
            st.markdown("---")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

# Display system prompt and knowledge in expanders
# Display chat completion parameters
st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç-–±–æ—Ç–∞", expanded=False):
    st.markdown("""
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:**
    - Temperature: 0.3 (–Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
    - Top P: 0.95 (–≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
    - Frequency Penalty: 0.2 (–ª–µ–≥–∫–∏–π —à—Ç—Ä–∞—Ñ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
    - Presence Penalty: 0.2 (–ª–µ–≥–∫–∏–π —à—Ç—Ä–∞—Ñ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    """)

with st.expander("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", expanded=False):
    try:
        system_prompt = open("system_prompt.txt").read().strip()
        st.text_area("–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", system_prompt, height=300, label_visibility="hidden")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {str(e)}")

st.subheader("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
st.markdown("**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º algorithm.ai:**")
for filename in sorted(os.listdir("knowledge")):
    if filename.endswith(".txt"):
        with st.expander(filename.replace(".txt", ""), expanded=False):
            try:
                content = open(os.path.join("knowledge", filename)).read().strip()
                st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", content, height=300)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")
